변수 선언 시:
def 같은 함수 내 선언 시 지역 변수, 외부 선언 시 전역 변수이나, 내부 호출 시 불가능 하기 때문에 C++이나 C, java와는 반대로 내부 함수에서 Global이라는 형을 선언해 주어야만 전역 변수의 값도 변경된다.

주석 시: ''' 안의 내용은 전부 주석 /' '/ 와 같다 ''' or # 뒤의 내용은 전부 주석처리됨
주석은 #의 경우 ''' '''보다 강해 '''를 주석할 땐 # 사용시 가능

for, while의 루프문의 경우 c처럼 continue는 아예 그 자리에서 다음값의 루프로 실행되고, break역시 루프문 밖으로 나온다.

list 에러 시 'str' object has no attribute 'append'가 나타날 시 해당 형에 뒤의 형식적용을 할 수 없을 때 나타나는 에러
-> list에 대한 추가 함수 append인데, str형에 적용하려해서 나타나는 에러
해결 : list1.append(list(list2))

python function내 기능:
iterable -> 자신의 멤버를 한 번에 한나씩 리턴하는 객체. list, str, tuple, dict 등
sequence -> int 타입 인덱스를 통해 원소에 접근할 수 있는 iterable. iterable의 low category list, str, tuple 등
unpacking -> 구조체 메소드의 컴파일된 형식(format)을 지정된 데이터 형식의 반복 인스턴스를 포함하는 버퍼 압축풀기하여 스트리밍 제공

lambda, map, divmod

list 문의 다양한 형태
[a for a in 수의 배열 or 배열 if 조건식] 
[(a, b) for a, b in enumerate(배열)] 도 가능, 2개의 값 받을 시 ()필수
[a if 조건식 else 연산식 for a in 배열] 은 for 뒤의 if문 외에 else로 연산이 필요 시 if문을 뒤가 아닌 앞에 표시하고 else문을 추가하면 된다.
list(map(lambda x : x + 1, 배열))
list(map(lambda x, y : x * y, 배열, 배열))
list(map(lambda x, y : x * y if x * y > 10 else None, 배열, 배열)) -> 조건식 사용 시 else는 필수라 함 else구문 필요 없을 시 None선언

리스트 2차원 배열 시 각 항의 행, 열 앞부분 출력
comprehension 사용 [[row[col] for row in matrix] for col in range(len(matrix))]
list(map(list, zip(*mylist)))

zip()함수를 통해 zip("배열1","배열2","배열3"...) 배열 순서 대로 각 배열의 값을 순차적 탐색 2차원 배열의 경우 [0][0] [1][0] [2][0]... [0][1] [1][1] [2][1]... 순으로 추출
-> zip 함수는 다항입력 시 list중 더 길이가 짧은 list를 기준으로 먼저 탐색을 끝냄. itertools.zip_longest()를 사용하면 더 짧은 list가 끝나도 계속 탐색

list나 어떠한 값이 여러번 반복되고 싶을땐, 값 * n 숫자 로 반복되게 만들 수 있음

ex)
test = list(map(lambda x, a: x[a] + " " + x[a+1] 
if a < len(secW) - 2 and len(x[a]) + len(x[a+1]) + 1 <= K else None,
secW, range(len(secW)-1)))
print(test)
결과 = ['n i', 'a p', None]

map: map(function, iterable...) -> 함수를 iterable(배열 자료형)으로 하나씩 함수에 실행함.
divmod: print(*divmod(x, y)) -> 수가 클 수록 유리 a/b, a%b는 수가 작을 수록 유리
int(): int(a, b)일때 a가 b진법수 일때 10진법으로 바꿔 줌

문자열 포메팅 시 기존의 %를 이용한 문자열 조정도 가능하지만 가운데, 좌, 우 정렬도 가능한 string 함수가 있다.
str.ljust(num) 좌측 정렬 str.center(num) 중앙 정렬 str.rjust(num) 우측 정렬 -> num만큼 공백이 생김.
string 함수의 join을 통해 문자열 합치기 가능 +도 문자열의 합

string 출력용 상수
string.ascii_letters : 알파벳의 소문자, 대문자 전부를 출력 This value is not locale-dependent.
string.ascii_lowercase : 알파벳의 소문자. 변경될 일이 없음 This value is not locale-dependent
string.ascii_uppercase : 알파벳의 대문자. 변경될 일이 없음 This value is not locale-dependent
string.digits : 숫자 0 ~ 9
string.hexdigits : 16진수
string.octdigits : 8진수
string.punctuation : String of ASCII characters which are considered punctuation characters in the C locale.
string.printable : String of ASCII characters which are considered printable. This is a combination of digits, ascii_letters, punctuation, and whitespace.
string.whitespace : A string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.
